1. Estruturas Básicas
Variáveis e Tipos de Dados
C# é uma linguagem tipada, o que significa que você precisa declarar o tipo de dados das variáveis.

int idade = 25;
double salario = 3500.50;
string nome = "João";
bool ativo = true;

- OBS:O tipo float em C# não está obsoleto, mas seu uso é menos comum que o de double, que oferece maior precisão (64 bits vs. 32 bits).

Precisão: O float é de precisão simples, enquanto o double é de precisão dupla.
Declaração: Literais de ponto flutuante são tratados como double por padrão; para usar float, deve-se adicionar um sufixo f (ex: float decibeis = 15.14f;).
Desempenho: A diferença de desempenho é geralmente pequena, mas double é preferido em cálculos financeiros que exigem precisão.
Compatibilidade: O float ainda é usado em gráficos de jogos e APIs específicas.
Em resumo, o float é menos comum, mas não está em desuso.
_______________________________________________________________________________________________________________________________________________________________________

Constantes
As constantes são declaradas com a palavra-chave const.

const double PI = 3.14;
_______________________________________________________________________________________________________________________________________________________________________

2. Estruturas de Controle
As estruturas de controle permitem que você direcione o fluxo de execução do seu programa com base em condições e repetições. Elas são fundamentais para implementar lógica e decisões no código.

Condicionais
If, Else If e Else
Essas instruções são usadas para tomar decisões com base em condições.

Exemplo:

csharp
Copiar código
if (idade >= 18)
{
    Console.WriteLine("Você é maior de idade.");
}
else
{
    Console.WriteLine("Você é menor de idade.");
}
Else If
Permite testar múltiplas condições sequencialmente.

Exemplo:

csharp
Copiar código
if (idade < 13)
{
    Console.WriteLine("Você é uma criança.");
}
else if (idade < 18)
{
    Console.WriteLine("Você é um adolescente.");
}
else
{
    Console.WriteLine("Você é um adulto.");
}
Switch
A instrução switch é uma alternativa ao if quando você tem várias condições baseadas em uma única variável. É útil para melhorar a legibilidade quando há muitas opções.

Exemplo:

csharp
Copiar código
int diaDaSemana = 3;

switch (diaDaSemana)
{
    case 1:
        Console.WriteLine("Domingo");
        break;
    case 2:
        Console.WriteLine("Segunda-feira");
        break;
    case 3:
        Console.WriteLine("Terça-feira");
        break;
    default:
        Console.WriteLine("Dia inválido");
        break;
}

_______________________________________________________________________________________________________________________________________________________________________

Laços de Repetição
Os laços permitem repetir um bloco de código até que uma condição específica seja atendida. Isso é útil para executar tarefas repetitivas de forma eficiente.

1. For Loop
O for é utilizado quando você sabe de antemão quantas vezes deseja repetir um bloco de código. Você define um índice inicial, uma condição de parada e um incremento.

Exemplo:

csharp
Copiar código
for (int i = 0; i < 5; i++)
{
    Console.WriteLine($"Número: {i}");
}
2. While Loop
O while é usado quando você deseja repetir um bloco de código enquanto uma condição for verdadeira. É útil quando o número de iterações não é conhecido antecipadamente.

Exemplo:

csharp
Copiar código
int contador = 0;
while (contador < 5)
{
    Console.WriteLine($"Contador: {contador}");
    contador++;
}
3. Do-While Loop
O do-while é similar ao while, mas garante que o bloco de código seja executado pelo menos uma vez, pois a condição é verificada após a execução do bloco.

Exemplo:

csharp
Copiar código
int contador = 0;
do
{
    Console.WriteLine($"Contador: {contador}");
    contador++;
} while (contador < 5);
4. Foreach Loop
O foreach é utilizado para iterar sobre coleções, como arrays e listas. Ele simplifica o acesso a cada elemento, sem a necessidade de gerenciar índices.

Exemplo:

csharp
Copiar código
string[] frutas = { "maçã", "banana", "laranja" };

foreach (string fruta in frutas)
{
    Console.WriteLine(fruta);
}
Comparação Rápida
For: Quando você sabe quantas vezes vai repetir. Ideal para iterações baseadas em índice.
While: Quando você não sabe o número de iterações e quer repetir enquanto uma condição for verdadeira.
Do-While: Semelhante ao while, mas garante que o código seja executado pelo menos uma vez.
Foreach: Melhor para iterar sobre coleções, simplificando o acesso a cada elemento.
Conclusão
Essas estruturas de repetição são fundamentais em C# e cada uma delas tem seu uso específico. Saber quando usar cada uma delas pode ajudar a escrever um código mais eficiente e legível.
_______________________________________________________________________________________________________________________________________________________________________

3. Métodos
Métodos são blocos de código que realizam uma tarefa específica e podem ser reutilizados.

void Apresentar(string nome)
{
    Console.WriteLine($"Olá, {nome}!");
}

// Chamada do método
Apresentar("Maria");

_______________________________________________________________________________________________________________________________________________________________________

4. Classes e Objetos
C# é uma linguagem orientada a objetos. Você pode definir suas próprias classes.

class Pessoa
{
    public string Nome { get; set; }
    public int Idade { get; set; }

    public void Apresentar()
    {
        Console.WriteLine($"Olá, meu nome é {Nome} e eu tenho {Idade} anos.");
    }
}

// Criando um objeto
Pessoa pessoa = new Pessoa();
pessoa.Nome = "Carlos";
pessoa.Idade = 30;
pessoa.Apresentar();

_______________________________________________________________________________________________________________________________________________________________________

5. Listas e Coleções
As coleções são usadas para armazenar grupos de objetos.

using System.Collections.Generic;

List<string> frutas = new List<string>();
frutas.Add("Maçã");
frutas.Add("Banana");
frutas.Add("Laranja");

foreach (var fruta in frutas)
{
    Console.WriteLine(fruta);
}

_______________________________________________________________________________________________________________________________________________________________________

6. Tratamento de Exceções
C# oferece uma maneira de tratar erros usando try, catch e finally.

try
{
    int resultado = 10 / 0; // Isso gera uma exceção
}
catch (DivideByZeroException ex)
{
    Console.WriteLine("Erro: Não é possível dividir por zero.");
}
finally
{
    Console.WriteLine("Este bloco sempre será executado.");
}

_______________________________________________________________________________________________________________________________________________________________________

7. Programação Assíncrona
C# suporta programação assíncrona com async e await.

using System.Threading.Tasks;

async Task<string> BuscarDadosAsync()
{
    await Task.Delay(2000); // Simula uma operação demorada
    return "Dados carregados.";
}

// Uso
async Task Main()
{
    string dados = await BuscarDadosAsync();
    Console.WriteLine(dados);
}

_______________________________________________________________________________________________________________________________________________________________________

8. LINQ (Language Integrated Query)
LINQ é uma poderosa ferramenta para consultar coleções.

using System.Linq;

List<int> numeros = new List<int> { 1, 2, 3, 4, 5 };
var numerosPares = from n in numeros
                   where n % 2 == 0
                   select n;

foreach (var numero in numerosPares)
{
    Console.WriteLine(numero);
}

_______________________________________________________________________________________________________________________________________________________________________
Conclusão
Esses são os conceitos básicos de C#. À medida que você avança, pode explorar tópicos mais avançados, como interfaces, herança, delegados e eventos. A prática é fundamental, então experimente escrever seus próprios exemplos! Se precisar de mais detalhes sobre algum tópico específico, sinta-se à vontade para perguntar.

_______________________________________________________________________________________________________________________________________________________________________


Console.ReadKey()

Função: Lê a tecla pressionada pelo usuário no console e aguarda até que uma tecla seja pressionada.

Uso Comum:

Pausar a Execução: Mantém a janela do console aberta até que o usuário pressione uma tecla.
Capturar Entrada: Permite capturar e usar a tecla pressionada.
Ignorar Entrada: Pode ser usado com o argumento true para não exibir a tecla pressionada.
Exemplos de Uso:

Manter o Console Aberto:

Console.WriteLine("Pressione qualquer tecla para sair...");
Console.ReadKey();
Capturar e Mostrar a Tecla Pressionada:


Console.WriteLine("Pressione uma tecla:");
ConsoleKeyInfo tecla = Console.ReadKey();
Console.WriteLine($"\nVocê pressionou: {tecla.KeyChar}");
Ignorar a Tecla Pressionada:


Console.WriteLine("Pressione uma tecla (não será exibida):");
Console.ReadKey(true);
Conclusão: Console.ReadKey() é útil para interação com o usuário em aplicativos de console, ajudando a pausar a execução ou capturar a entrada do usuário.

_______________________________________________________________________________________________________________________________________________________________________

-Neste ponto eu baixei o SQL Express e sua ide o SSMS.
E criei um banco chamado Debugand_C e uma tabela chamada tb_Nomes, que contém o seguinte código apenas:

INSERT INTO tb_Nomes VALUES ('Lucas')

SELECT * FROM tb_Nomes

_______________________________________________________________________________________________________________________________________________________________________
				
					PROGRAMAÇÃO ORIENTADA A OBJETOS
				
				
A orientação a objetos (OO) é um paradigma de programação que utiliza "objetos" para representar dados e métodos. Em C#, a OO se baseia em quatro princípios fundamentais: encapsulamento, herança, polimorfismo e abstração. Vamos detalhar cada um deles:

1. Encapsulamento
O encapsulamento refere-se à prática de esconder os detalhes internos de um objeto e expor apenas o que é necessário. Isso é feito através de modificadores de acesso.

Exemplo:

csharp
Copiar código
public class ContaBancaria
{
    private decimal saldo; // Atributo privado

    public void Depositar(decimal valor)
    {
        saldo += valor; // Método público para modificar o saldo
    }

    public decimal ObterSaldo()
    {
        return saldo; // Método público para acessar o saldo
    }
}
2. Herança
A herança permite que uma classe derive de outra, herdando seus atributos e métodos. Isso promove a reutilização de código e a criação de hierarquias de classes.

Exemplo:

csharp
Copiar código
public class ContaBancaria
{
    public decimal Saldo { get; protected set; }

    public virtual void Depositar(decimal valor)
    {
        Saldo += valor;
    }
}

public class ContaPoupanca : ContaBancaria // Herda de ContaBancaria
{
    public override void Depositar(decimal valor)
    {
        base.Depositar(valor); // Chama o método da classe base
        // Adiciona lógica específica para ContaPoupanca
    }
}
3. Polimorfismo
O polimorfismo permite que métodos em diferentes classes sejam chamados de maneira intercambiável, mesmo que suas implementações sejam diferentes. Isso é geralmente alcançado através de interfaces ou classes abstratas.

Exemplo:

csharp
Copiar código
public interface IForma
{
    double CalcularArea();
}

public class Circulo : IForma
{
    public double Raio { get; set; }
    public double CalcularArea() => Math.PI * Raio * Raio;
}

public class Retangulo : IForma
{
    public double Largura { get; set; }
    public double Altura { get; set; }
    public double CalcularArea() => Largura * Altura;
}
4. Abstração
A abstração permite que você represente conceitos complexos de forma simplificada, focando nos aspectos relevantes e ocultando os detalhes desnecessários. Isso é feito através de classes abstratas e interfaces.

Exemplo:

csharp
Copiar código
public abstract class Forma // Classe abstrata
{
    public abstract double CalcularArea(); // Método abstrato
}

public class Quadrado : Forma
{
    public double Lado { get; set; }
    public override double CalcularArea() => Lado * Lado;
}
Conclusão
A orientação a objetos em C# permite estruturar seu código de maneira mais intuitiva e organizada. Esses princípios ajudam a criar software que é mais fácil de manter e escalar. 
_______________________________________________________________________________________________________________________________________________________________________

INTERNAL CLASS: Em C#, uma internal class é uma classe que é acessível apenas dentro do mesmo assembly em que foi definida. Isso significa que outras partes do código, que estão em assemblies diferentes, não conseguem ver ou usar essa classe.

Principais Características de uma internal class:
Escopo de Acesso: A classe é visível apenas para o código que reside no mesmo projeto (ou assembly). Se você tentar acessar essa classe de outro projeto, ocorrerá um erro de compilação.

Encapsulamento: O uso de internal é uma maneira de encapsular e proteger implementações internas que não devem ser expostas a outros assemblies. Isso ajuda a manter a integridade do código.

Default Modifier: Se você não especificar um modificador de acesso para uma classe em C#, ela será considerada internal por padrão, se estiver em um namespace.

Exemplo de Uso:
csharp
Copiar código
// Definição da classe interna
internal class Funcionario
{
    public string Nome { get; set; }

    public void Trabalhar()
    {
        Console.WriteLine($"{Nome} está trabalhando.");
    }
}

// Essa classe pode acessar a classe Funcionario
public class Empresa
{
    public void Contratar()
    {
        Funcionario funcionario = new Funcionario();
        funcionario.Nome = "João";
        funcionario.Trabalhar();
    }
}
Quando Usar internal:
Quando você deseja ocultar implementações que não precisam ser expostas a outros assemblies.
Quando você está criando bibliotecas e quer controlar o que é acessível externamente.
Para melhorar a organização e a segurança do código.

_______________________________________________________________________________________________________________________________________________________________________
MINHAS EXPLICAÇÕESS SIMPLIFICADAS:

- NAMESPACE: É onde a classe está localizada. Ou seja, aonde que eu tenho que referenciar uma classe para eu poder achar ela dentro do meu código.

- INTERNAL CLASS: A classe só pode ser  referenciada dentro dela mesma. Eu não posso utilizar em outros lugares. 

- PUBLIC CLASS: As outras classes do meu código/projeto conseguem enxergar essa classe. 

-ENCAPSULAMENTO:  Dentro dos Atributos tem o Encapsulamento, que vai dizer se aquela variável pode ser vista em outro código/classe ou não. É o tipo de permissão que damos as variáveis.




