						- SQL SERVER EXPRESS.

O SQL Server Express é uma edição gratuita e leve do Microsoft SQL Server, projetada para desenvolvedores, pequenas aplicações e aprendizado. Aqui estão os principais aspectos que você deve conhecer sobre ele:

1. Características Principais
Gratuito: SQL Server Express é totalmente gratuito, sem custos de licenciamento, o que o torna uma excelente opção para desenvolvimento e pequenos projetos.

Limitações de Recursos:

Memória: Suporta até 1 GB de RAM.
Tamanho do Banco de Dados: O tamanho máximo de cada banco de dados é de 10 GB.
Processadores: Suporta até 1 socket ou 4 núcleos de CPU.
Sem Suporte a Recursos Avançados: Não inclui recursos avançados das edições pagas, como análise de dados, integração, replicação, ou suporte para BI (Business Intelligence).

2. Instalação e Configuração
Facilidade de Instalação: O instalador é simples e permite escolher as opções de instalação de forma intuitiva.

Gerenciamento: Pode ser gerenciado usando o SQL Server Management Studio (SSMS), que é uma ferramenta gratuita da Microsoft.

3. Recursos Suportados
T-SQL: Suporta a linguagem Transact-SQL, permitindo a execução de consultas, criação de procedimentos armazenados e triggers.

Segurança: Oferece autenticação do SQL Server e do Windows, permitindo controlar o acesso aos dados.

Stored Procedures e Views: Você pode criar stored procedures, views, funções e índices.

Backup e Restauração: Permite fazer backup e restaurar bancos de dados, embora com algumas limitações em comparação com edições pagas.

4. Casos de Uso Comuns
Desenvolvimento e Testes: Ideal para desenvolvedores que precisam de um ambiente de banco de dados para desenvolver e testar aplicações.

Aplicações de Pequeno Porte: Útil para pequenas aplicações empresariais, aplicativos web e para aprendizado em cursos de banco de dados.

Aprendizado: Excelente para estudantes e profissionais em formação que desejam aprender SQL e administração de banco de dados.

5. Limitações Importantes
Desempenho: Com as limitações de CPU e RAM, não é ideal para aplicações de alta carga.

Suporte Técnico: Não oferece suporte técnico oficial, mas você pode encontrar ajuda na comunidade online.

Recursos Avançados: Recursos como integração com Azure, análise avançada e ferramentas de BI não estão disponíveis.

6. Como Começar
Download: Você pode baixar o SQL Server Express diretamente do site da Microsoft.

Instalação: Siga as instruções do assistente de instalação, escolhendo as opções que melhor atendem suas necessidades.

Gerenciamento: Instale o SQL Server Management Studio (SSMS) para gerenciar seu banco de dados.

7. Manutenção e Backup
Manutenção Regular: Realizar backups regulares é essencial para garantir a integridade dos dados.

Monitoramento de Performance: Utilize ferramentas de monitoramento para acompanhar o desempenho e ajustar configurações conforme necessário.

8. Alternativas
Se as limitações do SQL Server Express não atendem suas necessidades, você pode considerar outras edições do SQL Server, como o Standard ou o Enterprise, que oferecem mais recursos, embora com custos de licenciamento.

Conclusão
O SQL Server Express é uma ferramenta poderosa para desenvolvedores e pequenos projetos, oferecendo muitos recursos gratuitamente, apesar de algumas limitações. É uma ótima escolha para quem está começando com bancos de dados ou para aplicações que não exigem grandes volumes de dados e alta performance.

_______________________________________________________________________________________________________________________________________________________________________

							- COMANDOS :

1. SELECT
Usado para consultar dados de uma ou mais tabelas.
SELECT coluna1, coluna2
FROM NomeTabela
WHERE condicao;

Exemplo: Seleciona o nome e a idade de todos os funcionários com idade maior que 30.
SELECT Nome, Idade
FROM Funcionarios
WHERE Idade > 30;

_______________________________________________________________________________________________________________________________________________________________________
2. INSERT
Usado para adicionar novos registros a uma tabela.
INSERT INTO NomeTabela (coluna1, coluna2)
VALUES (valor1, valor2);

Exemplo: Adiciona um novo funcionário.
INSERT INTO Funcionarios (Nome, Idade)
VALUES ('Maria', 28);

_______________________________________________________________________________________________________________________________________________________________________
3. UPDATE
Usado para modificar dados existentes em uma tabela.
UPDATE NomeTabela
SET coluna1 = valor1, coluna2 = valor2
WHERE condicao;

Exemplo: Atualiza a idade de um funcionário.
UPDATE Funcionarios
SET Idade = 30
WHERE Nome = 'Maria';
_______________________________________________________________________________________________________________________________________________________________________
4. DELETE
Descrição:
O comando DELETE é utilizado para remover um ou mais registros de uma tabela. É uma ferramenta poderosa para gerenciar dados, permitindo a exclusão de informações que não são mais necessárias. O comando DELETE permite o uso da cláusula WHERE, o que significa que você pode especificar quais registros deseja remover da tabela.

Sintaxe:
DELETE FROM NomeTabela
WHERE condicao;
NomeTabela: Especifica a tabela da qual você deseja remover os registros.
condicao: Define quais registros devem ser excluídos. Se esta cláusula não for utilizada, todos os registros da tabela serão removidos.

Exemplo:
Para remover um funcionário da tabela Funcionarios, onde o nome do funcionário é 'Maria':
DELETE FROM Funcionarios
WHERE Nome = 'Maria';

Comportamento em Relação ao IDENTITY

IDENTITY: Se a tabela contém uma coluna IDENTITY, a propriedade IDENTITY garante que cada novo registro inserido na tabela tenha um valor exclusivo gerado automaticamente. Por exemplo, se você tem uma coluna ID definida como IDENTITY, os valores dessa coluna serão incrementados automaticamente a cada nova inserção.

Após um DELETE: Ao usar o comando DELETE, os valores da coluna IDENTITY não são redefinidos. Portanto, se você deletar um registro, como o funcionário 'Maria', cuja coluna ID tinha o valor 3, a próxima inserção ainda usará o próximo número disponível (por exemplo, 4). Isso significa que os IDs não são reutilizados, o que pode deixar lacunas nos números. Ou seja, os IDs não recomeçam do 1 após um DELETE. Para redefinir os IDs e começar a contagem do zero (ou do valor inicial), você deve usar o comando TRUNCATE.
Pontos a Considerar
Início da Contagem: Os IDs não recomeçam do 0 após um DELETE, mas sim do próximo valor disponível. Por exemplo, se o maior ID na tabela for 5 e você deletar o registro com ID 3, a próxima inserção será 6.

Uso do TRUNCATE: O comando TRUNCATE redefine a coluna IDENTITY, fazendo com que a próxima inserção comece novamente a partir do valor inicial, que normalmente é 1.

Resumo
Uso do DELETE: Remover registros específicos de uma tabela.
Controle: A cláusula WHERE permite especificar quais registros excluir, oferecendo controle total sobre a operação.
Impacto no IDENTITY: O comando DELETE não redefine os valores da coluna IDENTITY, preservando a continuidade dos números, mesmo que haja lacunas.
_______________________________________________________________________________________________________________________________________________________________________
5. TRUNCATE
Descrição:
O comando TRUNCATE é usado para remover todos os registros de uma tabela de forma rápida, sem registrar cada remoção individualmente.

Funcionamento:
No SQL Server, o comando TRUNCATE não apenas remove todos os registros de uma tabela, mas também redefine os valores da coluna IDENTITY(chave primária. ex: Id) (se houver). Isso significa que, após um TRUNCATE, a próxima vez que você inserir um novo registro, a coluna IDENTITY começará a contar novamente a partir do valor inicial (geralmente 1).

O comando TRUNCATE não permite o uso da cláusula WHERE. Quando você utiliza TRUNCATE, ele remove todos os registros de uma tabela de uma só vez, sem a possibilidade de filtrar quais registros excluir.

Observação:
A propriedade IDENTITY é geralmente usada em colunas que são chaves primárias. Quando uma coluna é definida como IDENTITY, o SQL Server gera automaticamente um valor exclusivo para essa coluna a cada nova inserção, tornando-a ideal para ser uma chave primária.

Sintaxe:
TRUNCATE TABLE NomeTabela;

Exemplo:
Remove todos os registros da tabela Funcionarios.
TRUNCATE TABLE Funcionarios;
_______________________________________________________________________________________________________________________________________________________________________
6. CREATE TABLE
Usado para criar uma nova tabela no banco de dados.
CREATE TABLE NomeTabela (
    coluna1 TipoDeDado,
    coluna2 TipoDeDado
);

Exemplo: Cria uma tabela para armazenar informações de funcionários.
CREATE TABLE Funcionarios (
    ID INT PRIMARY KEY,
    Nome NVARCHAR(50),
    Idade INT
);
_______________________________________________________________________________________________________________________________________________________________________
7. ALTER TABLE
Usado para modificar a estrutura de uma tabela existente.
ALTER TABLE NomeTabela
ADD NovaColuna TipoDeDado;

Exemplo: Adiciona uma coluna para armazenar a posição do funcionário.
ALTER TABLE Funcionarios
ADD Posicao NVARCHAR(50);
_______________________________________________________________________________________________________________________________________________________________________
8. DROP TABLE
Usado para remover uma tabela do banco de dados.
DROP TABLE NomeTabela;

Exemplo: Remove a tabela Funcionarios.
DROP TABLE Funcionarios;
_______________________________________________________________________________________________________________________________________________________________________
9. JOIN
Usado para combinar registros de duas ou mais tabelas com base em uma condição relacionada.
SELECT a.coluna1, b.coluna2
FROM TabelaA a
JOIN TabelaB b ON a.colunaChave = b.colunaChave;

Exemplo: Combina dados de tabelas de funcionários e departamentos.
SELECT f.Nome, d.NomeDepartamento
FROM Funcionarios f
JOIN Departamentos d ON f.DepartamentoID = d.ID;
_______________________________________________________________________________________________________________________________________________________________________
10. GROUP BY
Usado para agrupar registros que têm valores iguais em colunas especificadas.
SELECT coluna, COUNT(*)
FROM NomeTabela
GROUP BY coluna;

Exemplo: Conta o número de funcionários em cada departamento.
SELECT DepartamentoID, COUNT(*)
FROM Funcionarios
GROUP BY DepartamentoID;
_______________________________________________________________________________________________________________________________________________________________________
11. ORDER BY
Usado para ordenar os resultados de uma consulta.
SELECT coluna1, coluna2
FROM NomeTabela
ORDER BY coluna1 ASC|DESC;

Exemplo: Ordena os funcionários por idade.
SELECT Nome, Idade
FROM Funcionarios
ORDER BY Idade ASC;

_______________________________________________________________________________________________________________________________________________________________________
BEGIN TRAN é um comando usado em bancos de dados para iniciar uma transação. Transações são uma forma de agrupar uma série de operações de banco de dados que devem ser executadas como uma unidade única e atômica. Se todas as operações dentro da transação forem bem-sucedidas, a transação pode ser confirmada; se ocorrer algum erro, todas as operações podem ser revertidas.

Características do BEGIN TRAN
Início da Transação:
O comando BEGIN TRAN marca o início de uma transação. Todas as operações subsequentes (como INSERT, UPDATE, DELETE) serão parte dessa transação.
Atomicidade:
As transações garantem que todas as operações sejam concluídas com sucesso ou nenhuma delas será aplicada. Isso é conhecido como a propriedade de atomicidade.

Controle de Erros:
Se uma operação falhar, você pode usar o comando ROLLBACK para desfazer todas as operações realizadas desde o BEGIN TRAN.

Confirmação:
Se todas as operações forem bem-sucedidas, você pode usar o comando COMMIT para confirmar a transação, tornando as mudanças permanentes no banco de dados.
Exemplo de Uso
BEGIN TRAN;

-- Operações de banco de dados
INSERT INTO Funcionarios (Nome, Idade) VALUES ('Alice', 30);
UPDATE Funcionarios SET Idade = 31 WHERE Nome = 'Bob';

-- Verifica se tudo ocorreu bem
IF @@ERROR <> 0
BEGIN
    ROLLBACK; -- Desfaz as operações se ocorrer um erro
END
ELSE
BEGIN
    COMMIT; -- Confirma as operações se tudo estiver certo
END
Resumo
BEGIN TRAN: Inicia uma transação.
ROLLBACK: Desfaz as operações se ocorrer um erro.
COMMIT: Confirma as operações, tornando-as permanentes.
As transações são essenciais para garantir a integridade e a consistência dos dados em sistemas de gerenciamento de banco de dados. Se precisar de mais informações ou exemplos, estou à disposição!

_______________________________________________________________________________________________________________________________________________________________________


EXEMPLO 1: EXCLUINDO UMA TABELA COM DROP, USANDO ROLLBACK PARA REVERTER A EXCLUSÃO E EVITANDO COMMIT PARA MANTER A TABELA INTACTA.

BEGIN TRAN
    DROP TABLE tb_Nomes;
ROLLBACK TRAN
COMMIT TRAN

Análise dos Comandos
BEGIN TRAN:

Este comando inicia uma transação. Todas as operações seguintes até que um COMMIT ou ROLLBACK sejam executados fazem parte dessa transação.
DROP TABLE tb_Nomes;:

Este comando remove a tabela tb_Nomes do banco de dados. A exclusão é irreversível assim que for confirmada.
ROLLBACK TRAN:

Este comando reverte todas as operações realizadas desde o último BEGIN TRAN. Neste caso, ele desfaz a exclusão da tabela tb_Nomes, desde que o ROLLBACK seja chamado antes do COMMIT.
COMMIT TRAN:

Este comando confirma a transação, tornando permanentes todas as alterações feitas durante a transação. No entanto, se o ROLLBACK for chamado antes do COMMIT, nenhuma alteração será confirmada.
Fluxo da Execução
Quando o comando DROP TABLE tb_Nomes é executado, a tabela está marcada para ser removida, mas como o ROLLBACK é chamado logo em seguida, a exclusão é revertida.
O COMMIT não será efetivo após um ROLLBACK. Assim, a tabela tb_Nomes permanecerá no banco de dados, pois a operação de exclusão foi desfeita.
Resumo
ROLLBACK: Neste caso, o uso do ROLLBACK TRAN após o DROP TABLE anula a exclusão da tabela, garantindo que ela permaneça intacta.
COMMIT: Como o ROLLBACK foi executado, o COMMIT não terá efeito, pois nenhuma alteração foi feita.
Conclusão
A estrutura do código que você apresentou garante que a tabela tb_Nomes não será excluída, pois o ROLLBACK reverte a operação de DROP TABLE. Portanto, a tabela continuará a existir após a execução desse bloco de código.

_______________________________________________________________________________________________________________________________________________________________________

EXEMPLO 2: SE EU EXECUTAR UM COMMIT ANTES DE REALIZAR O ROLLBACK.

Se você executar um COMMIT antes de um ROLLBACK, o ROLLBACK não terá efeito. Vamos analisar como isso funciona:

FLUXO DE EXECUÇÃO:
Se a estrutura do seu código fosse assim:
BEGIN TRAN
    DROP TABLE tb_Nomes;
COMMIT TRAN
ROLLBACK TRAN

O QUE ACONTECE:
BEGIN TRAN: Inicia a transação.

DROP TABLE tb_Nomes;: Remove a tabela tb_Nomes do banco de dados.

COMMIT TRAN: Confirma a transação, tornando a exclusão da tabela permanente. Neste ponto, a tabela tb_Nomes foi definitivamente removida do banco de dados.

ROLLBACK TRAN: Tenta reverter a transação. No entanto, como a transação já foi confirmada com COMMIT, o ROLLBACK não terá efeito. Não há nada a reverter, e a tabela já está excluída.

RESUMO:
COMMIT: Confirma todas as alterações realizadas na transação, tornando-as permanentes.
ROLLBACK: Desfaz alterações feitas na transação desde o último BEGIN TRAN. Mas, se já houver um COMMIT, não haverá nada a ser revertido.

CONCLUSÃO:
Depois de um COMMIT, as alterações são permanentes e o ROLLBACK não pode reverter essas operações. Portanto, se você quiser manter alterações que envolvem exclusões ou alterações de dados, deve usar ROLLBACK antes de chamar COMMIT.

_______________________________________________________________________________________________________________________________________________________________________

- QUERY:
-- Insere um novo registro na tabela tb_Nomes com o nome 'Lucas' e idade 27.
INSERT INTO tb_Nomes (Nome, Idade) VALUES ('Lucas', 27);

-- Insere um novo registro na tabela tb_Nomes com o nome 'Gabriel' e idade 27.
INSERT INTO tb_Nomes (Nome, Idade) VALUES ('Gabriel', 27);

-- Insere um novo registro na tabela tb_Nomes com o nome 'Wendel' e idade 27.
INSERT INTO tb_Nomes (Nome, Idade) VALUES ('Wendel', 27);

-- Insere um novo registro na tabela tb_Nomes com o nome 'Lorena' e idade 27.
INSERT INTO tb_Nomes (Nome, Idade) VALUES ('Lorena', 27);

---------------------------------------------------------------------------------------------------------------

-- Seleciona e exibe todos os registros da tabela tb_Nomes.
SELECT * FROM tb_Nomes;

---------------------------------------------------------------------------------------------------------------

-- Atualiza a idade do registro onde o ID é 1, definindo a idade como 30.
UPDATE tb_Nomes
SET
	Idade = 30
WHERE
	Id = 1;

---------------------------------------------------------------------------------------------------------------

-- Exclui todos os registros da tabela tb_Nomes. (Nota: o comando DELETE sem WHERE remove tudo.)
DELETE FROM tb_Nomes;

---------------------------------------------------------------------------------------------------------------

-- Remove todos os registros da tabela tb_Nomes e redefine os IDs (se houver).
TRUNCATE TABLE tb_Nomes;

---------------------------------------------------------------------------------------------------------------

-- Adiciona uma nova coluna chamada 'Ativo' do tipo inteiro à tabela tb_Nomes.
ALTER TABLE tb_Nomes ADD Ativo INT;

---------------------------------------------------------------------------------------------------------------

-- Inicia uma transação para que as operações subsequentes possam ser revertidas, se necessário.
BEGIN TRAN
	-- Tenta remover a tabela tb_Nomes do banco de dados.
	DROP TABLE tb_Nomes;

-- Reverte todas as operações realizadas desde o BEGIN TRAN, neste caso, a remoção da tabela.
ROLLBACK TRAN

-- Confirma a transação. (Neste caso, não terá efeito, pois o ROLLBACK foi executado antes.)
COMMIT TRAN

_______________________________________________________________________________________________________________________________________________________________________
							
							-JOINS NO SQL: INNER, LEFT E RIGHT

Vamos falar sobre os joins no SQL, que são usados para combinar dados de duas ou mais tabelas.

1. Inner Join
O Inner Join retorna apenas as linhas que têm correspondências em ambas as tabelas. Se uma linha em uma tabela não tiver uma correspondência na outra tabela, ela será excluída do resultado.

Exemplo: Suponha que você tenha duas tabelas, Clientes e Pedidos. Um Inner Join entre essas tabelas mostraria apenas os clientes que fizeram pedidos.

SELECT Clientes.nome, Pedidos.id
FROM Clientes
INNER JOIN Pedidos ON Clientes.id = Pedidos.cliente_id;
2. Left Join (ou Left Outer Join)
O Left Join retorna todas as linhas da tabela da esquerda (neste caso, Clientes), e as linhas correspondentes da tabela da direita (Pedidos). Se não houver correspondência, os resultados da tabela da direita serão preenchidos com NULL.

Exemplo: Se quisermos ver todos os clientes, independentemente de terem feito pedidos ou não, usaríamos um Left Join.


SELECT Clientes.nome, Pedidos.id
FROM Clientes
LEFT JOIN Pedidos ON Clientes.id = Pedidos.cliente_id;
3. Right Join (ou Right Outer Join)
O Right Join é o oposto do Left Join. Ele retorna todas as linhas da tabela da direita (Pedidos), e as linhas correspondentes da tabela da esquerda (Clientes). Se não houver correspondência, os resultados da tabela da esquerda serão preenchidos com NULL.

Exemplo: Para ver todos os pedidos, mesmo que alguns clientes não existam, usaríamos um Right Join.

SELECT Clientes.nome, Pedidos.id
FROM Clientes
RIGHT JOIN Pedidos ON Clientes.id = Pedidos.cliente_id;
Resumo
Inner Join: apenas correspondências.
Left Join: todos da tabela da esquerda + correspondências da tabela da direita.
Right Join: todos da tabela da direita + correspondências da tabela da esquerda.
Esses joins são fundamentais para trabalhar com dados relacionais no SQL, permitindo análises mais complexas e integradas.
